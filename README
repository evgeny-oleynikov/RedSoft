Документация по API
===================

Вступление
----------

    API интерфейс используется для доступа к каталогу продуктов. API предназначен для разработчиков.
Данное API создано исключительно в демонстрационных целях и не содержит ряд необходимых в "настоящем" API
функций, например функций авторизации. Так же не делались комментарии.
    В качестве замечания необходимо отметить: в задании было ясно указано, что каталог должен иметь
древовидную структуру с неограниченной вложенностью. Для реализации такой структуры был применен алгоритм
b-tree, который имеет один огромный недостаток. При увеличении количества узлов в каталоге возрастает
время вставки новых узлов. И при наличии больше миллиона узлов, процесс вставки катастрофически замедляется.
Поэтому, на мой взгляд, разумнее ограничивать количество вложений и применять более эффективные алгоритмы
построения дерева.

Установка
---------

Для установки API необходимо распаковать архив в папке сайта, например:
cd /var/www
tar xzf rSapi.tgz

Далее создаем пустую базу данных и в файле RedSoft/lib/config.php прописываем параметры доступа к
базе данных:

$conf = array(
 'dbdsn' => 'mysql:host=localhost;dbname=rSoftTest;charset=utf8mb4',
 'dbuser' => 'root',
 'dbpassword' => 'xxxxx',
 'tz' => 'Europe/Moscow',
 'locale' => 'ru_RU.UTF8',
);

При необходимоти так же меняем часовой пояс и языковые установки (locale).

Далее необходимо проинициализировать базу данных. Для этого выполняем скрипт install.php:

php install.php

и после этого запускаем скрипт для заполнения каталога данными для текстирования:

php make-data.php

Для демонстрации возможностей API служит скрипт call-api.php. В нем необходимо изменить значение
переменной $url указав в ней сайт на котором установлен API и путь к нему, например:

$url = 'http://www.test.com/RedSoft/api.php';

В переменной $content задаем параметры запроса к API.

Описание
--------

    API работает по протоколу HTTP и представляет собой набор методов, с помощью которых совершаются
запросы и возвращаются ответы для каждой операции. Все ответы приходят в виде JSON структур.

В общем случае запрос выглядит следующим образом:

{
  "<метод>": <аргумент(ы)>
}

При неправильном запросе API возвращает значение:

{
 "result": false
 "error": "<текст ошибки>"
}

В случае удачного завершения запроса API возвращает результат запроса:

{
 "result": <результат>
}


Методы
------

getItem
-------
Метод возвращает начение атрибутов продукта с указанным идентификатором. Аргумент - id продукта. Например:

Запрос:

{
  "getItem": 12
}

Результатом является хэш с перечнем атрибутов продукта и их значениями.

searchItemsByName
-----------------

Метод осуществляет нестрогий поиск по наименованиям продуктов. В качестве аргумента передается подстрока
для поиска:

{
  "searchItemsByName": "кольцо"
}

Результатом является массив найденных продуктов. Элементы массива - хэшы с перечнем атрибутов продукта
и их значениями.

searchItemsByBrand
------------------

Метод осуществляет поиск по наименованию(ям) производителей продуктов. В качестве аргумента передается либо
строка с названием производителя, либо массив с названиями производителей. Например:

{
  "searchItemsByBrand": "Levi's"
}

или

{
  "searchItemsByBrand": {"Levi's", "LG"}
}

Результатом является массив найденных продуктов. Элементы массива - хэшы с перечнем атрибутов продукта
и их значениями.

getChildren
-----------

Метод выводит список дочерних узлов каталога относительно указанного на один уровень ниже. В качестве
аргумента передается или идентификатор узла каталога или его название. Например:

{
  "getChildren": "2"
}

или

{
  "getChildren": "Бытовая электронника"
}

Результатом является массив найденных продуктов. Элементы массива - хэшы с перечнем атрибутов продукта и
их значениями. В результат входят как дочерние продукты, так и дочерние узлы каталога.

getChildrenAll
--------------

Метод выводит список всех вложенных узлов каталога относительно указанного. В качестве аргумента передается
или идентификатор узла каталога или его название. Например:

{
  "getChildrenAll": "2"
}

или

{
  "getChildrenAll": "Бытовая электронника"
}

Результатом является массив найденных продуктов. Элементы массива - хэшы с перечнем атрибутов продукта и
их значениями. В результат входят как дочерние продукты, так и дочерние узлы каталога.

getChildrenItems
----------------

Метод выводит список дочерних узлов каталога относительно указанного на один уровень ниже. В качестве
аргумента передается или идентификатор узла каталога или его название. Например:

{
  "getChildrenItems": "3"
}

или

{
  "getChildrenItems": "Телевизоры"
}

Результатом является массив найденных продуктов. Элементы массива - хэшы с перечнем атрибутов продукта и их
значениями. В результат входят только дочерние продукты.

getChildrenItemsAll
-------------------

Метод выводит список всех вложенных узлов каталога относительно указанного. В качестве аргумента передается
или идентификатор узла каталога или его название. Например:

{
  "getChildrenItemsAll": "2"
}

или

{
  "getChildrenItemsAll": "Бытовая электронника"
}

Результатом является массив найденных продуктов. Элементы массива - хэшы с перечнем атрибутов продукта и их
значениями. В результат входят только дочерние продукты.

